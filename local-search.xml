<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2021/12/21/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/12/21/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><code>type -a python3</code></p><p>查看所有python3安装目录</p><p><code>which python</code></p><p>查看当前使用的是哪里的python</p><h2 id="tmux使用方法"><a href="#tmux使用方法" class="headerlink" title="tmux使用方法"></a>tmux使用方法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">tmux ls<br><br>tmux new -s &lt; name&gt;<br><br>tmux attach -t &lt; name&gt;/&lt; number&gt;<br><br>tmux switch -t &lt; name &gt;/&lt; number &gt;<br><br>tmux detach<br><br>Ctrl+b d：分离当前会话。<br><br>Ctrl+b s：列出所有会话。<br><br>Ctrl+b $：重命名当前会话<br></code></pre></td></tr></table></figure><h2 id="ipdb操作："><a href="#ipdb操作：" class="headerlink" title="ipdb操作："></a>ipdb操作：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sh">ipdb.set_trace()<br><br>python -m ipdb your_code.py<br><br>下一条语句<br>使用n(next)执行下一条语句<br><br>进入函数内部<br>使用s(step into)进入函数调用的内部。<br><br>b line_number<br><br>b file_name:line_number<br><br>一直执行直到遇到下一个断点<br><br>使用c(<span class="hljs-built_in">continue</span>)执行代码直到遇到某个断点或程序执行完毕。<br><br>一直执行直到返回<br>使用r(<span class="hljs-built_in">return</span>)执行代码直到当前所在的这个函数返回。<br><br>跳过某段代码<br>使用j line_number(jump)可以跳过某段代码，直接执行指定行号所在的代码。<br>更多上下文<br><br>在IPDB调试环境中，默认只显示当前执行的代码行，以及其上下各一行的代码。如果想要看到更多的上下文代码，可以使用l first[, second](list)命令。<br><br>其中first指示向上最多显示的行号，second指示向下最多显示的行号（可以省略）。当second小于first时，second指的是从first开始的向下的行数（相对值vs绝对值）<br><br>我在哪里<br>w<br>调试兴起，可能你会忘了自己目前所在的行号。例如在打印了若干变量值后，屏幕完全被这些值占据。使用w或者<span class="hljs-built_in">where</span>可以打印出目前所在的行号位置以及上下文信息。<br><br>这是啥<br>我们可以使用whatis variable_name的方法，查看变量的类别（感觉有点鸡肋，用<span class="hljs-built_in">type</span>也可以办到）。<br><br>当你身处一个函数内部的时候，可以使用a(argument)打印出传入函数的所有参数的值。<br><br>使用p(<span class="hljs-built_in">print</span>)和pp(pretty <span class="hljs-built_in">print</span>)可以打印表达式的值。<br><br>使用cl或者clear file:line_number清除断点。如果没有参数，则清除所有断点。<br><br>使用restart重新启动调试器，断点等信息都会保留。restart实际是run的别名，使用run args的方式传入参数。<br><br>使用q退出调试，并清除所有信息。<br></code></pre></td></tr></table></figure><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>screen是一个可以在多个进程（通常是交互式shell）之间复用一个物理终端的全屏幕窗口管理器。即linux下使用多窗口</p><p>常用screen参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sh">screen -S session_name  <br><br>新建一个叫session_name的session<br><br>screen -ls（或者screen -list） <br><br>列出当前所有的session<br><br>screen -r session_name  <br><br>回到session_name这个session<br><br>screen -d session_name   <br><br>远程detach某个session<br><br>screen -d -r session_name      <br><br>结束当前session并回到session_name这个session<br><br>滑动窗口：<br>Ctrl + a + [<br>h -    Move the cursor left by one character<br>j -    Move the cursor down by one line<br>k -    Move the cursor up by one line<br>l -    Move the cursor right by one character<br>0 -    Move to the beginning of the current line<br>$ -    Move to the end of the current line.<br>G -    Moves to the specified line<br>       (defaults to the end of the buffer).<br>C-u -  Scrolls a half page up.<br>C-b -  Scrolls a full page up.<br>C-d -  Scrolls a half page down.<br>C-f -  Scrolls the full page down.<br><br>进入screen窗口后，想暂时退出（等会还想连接这个screen窗口）<br>crtl+a+d<br><br>退出当前screen窗口，结束当前screen窗口，不想再连接回来（即杀死会话）<br><span class="hljs-built_in">exit</span>或者ctrl+d<br></code></pre></td></tr></table></figure><p>top查看谁在用程序</p><h2 id="pytorch配置"><a href="#pytorch配置" class="headerlink" title="pytorch配置"></a>pytorch配置</h2><p>下载hydra-0.11<br>python setup.py install<br>pip install gym tensorboard</p><p>pip3 install –pre torch torchvision torchaudio -f <a href="https://download.pytorch.org/whl/nightly/cu111/torch_nightly.html">https://download.pytorch.org/whl/nightly/cu111/torch_nightly.html</a></p><p>conda install pytorch-1.8.0-py3.8_cuda11.1_cudnn8.0.5_0.tar.bz2</p><p>conda clean –all</p><p>pip install torchvison==0.9.0</p><p>permute(dims)</p><p>将tensor的维度换位。</p><h2 id="PyTorch的nn-Linear（）详解"><a href="#PyTorch的nn-Linear（）详解" class="headerlink" title="PyTorch的nn.Linear（）详解:"></a>PyTorch的nn.Linear（）详解:</h2><p>nn.linear(in_features,out_features,bias=True)</p><p>in_features指的是输入的二维张量的大小，即输入的[batch_size, size]中的size。  size = channel * height * width<br>out_features指的是输出的二维张量的大小</p><p>在使用前需要把数据view一下，四维变二维<br>x = x.view(x.size[0],-1)</p><p>torch.distributions.Categorical<br>对某个array进行分类，输出的是类别的分布</p><h2 id="服务器本地传文件："><a href="#服务器本地传文件：" class="headerlink" title="服务器本地传文件："></a>服务器本地传文件：</h2><p>ssh <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#57;&#52;&#46;&#49;&#54;&#53;&#x2e;&#x31;&#46;&#50;&#48;&#x33;">&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#57;&#52;&#46;&#49;&#54;&#53;&#x2e;&#x31;&#46;&#50;&#48;&#x33;</a> -p 2222  #指定端口登录<br>scp &lt;本地文件名&gt; -p 端口号 &lt;用户名&gt;@&lt;ssh服务器地址&gt;:&lt;上传保存路径即文件名&gt;</p><p>查看文件大小du -h –max-depth=1 your_dest_dir</p><h2 id="vscode-缩进："><a href="#vscode-缩进：" class="headerlink" title="vscode 缩进："></a>vscode 缩进：</h2><p>command [<br>command ]</p><h2 id="有关vscode崩坏的解决："><a href="#有关vscode崩坏的解决：" class="headerlink" title="有关vscode崩坏的解决："></a>有关vscode崩坏的解决：</h2><p>从 <a href="https://update.code.visualstudio.com/commit:$%7Bcommit_id%7D/server-linux-x64/stable">https://update.code.visualstudio.com/commit:${commit_id}/server-linux-x64/stable</a> 下载 vs code server</p><p>3866c3553be8b268c8a7f8c0482c0c0177aa8bfa<br><a href="https://update.code.visualstudio.com/commit:e7d7e9a9348e6a8cc8c03f877d39cb72e5dfb1ff/server-linux-x64/stable">https://update.code.visualstudio.com/commit:e7d7e9a9348e6a8cc8c03f877d39cb72e5dfb1ff/server-linux-x64/stable</a></p><p>${commit_id}替换为当前电脑id 379476f0e13988d90fab105c5c19e7abc8b1dea8</p><p>scp 传输到 vscode-server/bin/下</p><p>将远程的.vscode文件删除并重新连接可得到该id</p><p>cd /root/.vscode-server/bin/379476f0e13988d90fab105c5c19e7abc8b1dea8</p><p>mv vscode-server-linux-x64.tar vscode-server.tar.gz<br>touch vscode-scp-done.flag</p><p>mv vscode-server-linux-x64.tar.gz vscode-server.tar.gz</p><p>然后再连接就可以了。</p><p>又踩坑了，注意从谷歌下载该压缩包，大小大概为50m</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hellow world</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pytorch+mujoco</title>
    <link href="/2021/12/21/pytorch%E5%9D%91+mujoco%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/12/21/pytorch%E5%9D%91+mujoco%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="pytoch部分坑和理解"><a href="#pytoch部分坑和理解" class="headerlink" title="pytoch部分坑和理解"></a>pytoch部分坑和理解</h2><p>1，torch.tensor重建<br>2，torch的卷机操作和线性操作都不能够改变batch那一部分<br>3，对于两个不同的model进行顺序处理和使用不同的optim时，需要先同时进行backward操作在进行，optimize.step操作<br>4，对于此样系统而言：relu操作可能会造成数据的inplace，注意使用clone操作还有relu的（replace = false）<br>5,   不能直接取tensor的一部分会变成list。所以要使用函数torch的操作</p><p>torch.sub<br>$$<br>torch.sub(input, other,*,alpha=1,out=None)–&gt;Tensor\<br>Subtracts other, scaled by alpha, from input.\<br>out_i = input_i - alpha \times other_i<br>$$</p><h2 id="单例（Singleton）"><a href="#单例（Singleton）" class="headerlink" title="单例（Singleton）"></a>单例（Singleton）</h2><p>单例是一种<strong>设计模式</strong>，应用该模式的类只会生成一个实例。</p><p>单例模式保证了在程序的不同位置都<strong>可以且仅可以取到同一个对象实例</strong>：如果实例不存在，会创建一个实例；如果已存在就会返回这个实例。因为单例是一个类，所以你也可以为其提供相应的操作方法，以便于对这个实例进行管理。</p><p>Pytorch 实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">singleton</span>(<span class="hljs-params">cls</span>):</span><br>    _instance = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>():</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> _instance:<br>            _instance[cls] = cls()<br>        <span class="hljs-keyword">return</span> _instance[cls]<br>    <span class="hljs-keyword">return</span> inner<br>    <br><span class="hljs-meta">@singleton</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cls</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br>cls1 = Cls()<br>cls2 = Cls()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(cls1) == <span class="hljs-built_in">id</span>(cls2))<br></code></pre></td></tr></table></figure><h2 id="MuJoCo环境配置："><a href="#MuJoCo环境配置：" class="headerlink" title="MuJoCo环境配置："></a>MuJoCo环境配置：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用yml配置conda env</span><br>conda env create -f environment.yml<br><br><span class="hljs-comment"># 下载mujoco200</span><br><br><span class="hljs-comment"># 放到.mujoco</span><br><br>unzip mujoco200_linux.zip<br><br><span class="hljs-comment"># 改名为mujoco200</span><br><br>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.11-Linux-x86_64.sh  --no-check-certificate<br><br>sh Anaconda3-2020.11-Linux-x86_64.sh<br><br>conda env create -f conda_env.yml<br><br>pip install scipy==1.5.0<br><br>pip install termcolor==1.1.0 tb-nightly imageio==2.9.0 imageio-ffmpeg==0.4.4 hydra-core==1.1.0 hydra-submitit-launcher==1.1.5<br><br>pip install pandas==1.3.0 ipdb==0.13.9 yapf==0.31.0 sklearn==0.0 matplotlib==3.4.2 opencv-python==4.5.3.56<br><br>pip install dm_control<br><br>pip install mujoco_py==2.0.2.13<br><br>pip install lxml==4.5.2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hellow world</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客搭建</title>
    <link href="/2021/12/21/firstPage/"/>
    <url>/2021/12/21/firstPage/</url>
    
    <content type="html"><![CDATA[<p>搭建个人博客mac版</p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>搭建博客主要分为三个部分，执行可以无先后之分。</p><p>分别是：</p><p>1，环境配置Hexo</p><p>2，部署到github上</p><p>3，绑定域名</p><p>个人建议先绑定域名，因为实名认证以及域名解析认证需要花费3-5天时间。</p><p>三者的关系是，域名作为入口，hexo创建门面，github储存内容。因此，他们需要相互连接才能建成最后的博客，hexo首先创建博客，然后推送到github上进行存储，github连接域名，使得访问者可以看到你的博客。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>简洁高效的博客框架，可自己下载主题</p><p>官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>安装Hexo前需要安装Git</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 检查git是否安装</span><br>git --version<br><span class="hljs-comment"># 没安装就安装 </span><br>brew install git<br></code></pre></td></tr></table></figure><p>在mac上我们通过brew来安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install node<br><span class="hljs-comment"># 安装过程中可能出现bug,显示不能安装node的依赖libuv，那么就手动安装 brew install libuv</span><br><span class="hljs-comment"># 查看版本号</span><br>node -v<br><span class="hljs-comment"># 查看npm版本号 没有就安装</span><br>npm -v<br><span class="hljs-comment"># 安装 hexo</span><br>npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>创建文件夹：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 首先cd 到你想要保存的路径当中</span><br><span class="hljs-comment">#查看当前路径</span><br><span class="hljs-built_in">pwd</span><br><span class="hljs-comment">#查看当前文件夹下的文件</span><br>ls<br><span class="hljs-comment">#创建文件夹</span><br>mkdir blog<br><span class="hljs-built_in">cd</span> blog<br><span class="hljs-comment"># 初始化</span><br>hexo init<br><span class="hljs-comment"># 启动 s:start</span><br>hexo s<br>浏览器输入：http://localhost:4000，可查看到默认生成了一篇博文<br>新建一篇博文<br>hexo n <span class="hljs-string">&quot;hellow&quot;</span><br><span class="hljs-comment"># 清理</span><br>hexo clean<br><span class="hljs-comment">#生成</span><br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><h2 id="Github-部署"><a href="#Github-部署" class="headerlink" title="Github 部署"></a>Github 部署</h2><p>git新建一个仓库，具体新建步骤建议参考网上教程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装git部署插件</span><br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改_config.yml的配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/你的git名字.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">回到命令行部署到远端<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h2><p>首先需要在阿里云申请域名<br><a href="https://www.aliyun.com/ss/?k=%E5%9F%9F%E5%90%8D">https://www.aliyun.com/ss/?k=%E5%9F%9F%E5%90%8D</a></p><p>注册阿里云，</p><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><p>打开阿里云首页<br>控制台-&gt;域名-&gt;域名列表-&gt;解析</p><p>此处可能没有记录类型，默认的记录类型为A，因此记录值需要填写ip地址。可以在terminal中 ping 你的github名称.github.io，就能得到ip地址，生成解析文件后再进行修改即可。</p><p>设置主机记录@，记录类型为CNAME，记录值是”你的github名称.github.io“。<br>设置主机记录www，记录类型为CNAME，记录值是”你的github名称.github.io“</p><h3 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h3><p>在blog/source中添加文件CNAME</p><p>并写入你的域名如: asdf.com</p><p>接着回到blog/publish的终端：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>可能遇到的错误：<br>“The authenticity of host ‘github.com’ can’t be established”：这表明你正在连接 GitHub 的服务器时，系统无法确认其身份<br>“Permission denied (publickey)”：这个错误表明 Git 无法通过 SSH 密钥进行身份验证。<br>解决方案：添加SSH密钥</p><ol><li><p>   启动 SSH 代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>   添加 SSH 密钥到代理：<br>使用下面的命令添加密钥（如果你使用的是默认的密钥文件 ~/.ssh/id_rsa）：</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><pre><code>3.    验证 SSH 密钥是否添加成功：</code></pre><p>运行以下命令，确认密钥是否已正确添加到代理中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-add -l<br></code></pre></td></tr></table></figure><p>如果看到类似 2048 SHA256:xxxxxx 的输出，表示密钥已成功加载。</p><ol><li>检查 GitHub 是否添加了 SSH 公钥</li></ol><p>如果你还没有将 SSH 公钥添加到 GitHub，可以按照以下步骤进行添加：<br>    1.    查看本地公钥：<br>打开终端，运行以下命令查看 SSH 公钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>复制输出的内容。</p><pre><code>2.    将公钥添加到 GitHub：1.    登录到你的 GitHub 账户。2.    进入 Settings → SSH and GPG keys → New SSH key。3.    粘贴公钥内容并保存。</code></pre><ol start="3"><li>测试 SSH 连接</li></ol><p>可以通过以下命令测试 SSH 是否能够正确连接到 GitHub：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>如果连接成功，你应该会看到如下消息：</p><p>Hi <username>! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>如果你看到类似的消息，就说明 SSH 配置已经正确。</p><ol start="4"><li>确保 Git 远程 URL 正确</li></ol><p>请确保远程仓库的 URL 是通过 SSH 配置的，而不是 HTTPS。你可以使用以下命令查看当前的远程 URL 配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git remote -v<br></code></pre></td></tr></table></figure><p>如果看到的 URL 是类似 <a href="https://github.com/yourname/yourname.github.io.git%EF%BC%8C%E8%AF%B7%E6%8C%89%E7%85%A7%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%E5%B0%86%E5%85%B6%E6%9B%B4%E6%94%B9%E4%B8%BA">https://github.com/yourname/yourname.github.io.git，请按照以下命令将其更改为</a> SSH URL：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git remote set-url origin git@github.com:yourname/yourname.github.io.git<br></code></pre></td></tr></table></figure><ol start="5"><li>重新尝试推送代码</li></ol><p>如果上述步骤都已经完成，可以尝试重新执行 git push：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure><img src="https://github.com/Artimisu/artimis.github.io/blob/master/mdimg/a1.png?raw=true-2021122200261" style="zoom:50%;" /><h2 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h2><p>到阿里云主页，最上一栏的右边有ICP备案，根据教程走即可。</p><h2 id="Hexo扩展设置"><a href="#Hexo扩展设置" class="headerlink" title="Hexo扩展设置"></a>Hexo扩展设置</h2><p>首先，梳理一下关系：page生成页面，config文件设置页面，source存储文件内容。page生成的页面需要使用config来设置属性，而config中的资源调配需要符合source中存储的文件名称。</p><p>_config.yml文件用于设置博客的内容类型，比如颜色高度，名称等等，以及使用的图像链接来源。</p><p>总文件夹下和每个themes文件夹下都有相应的_config.yml。</p><p>source中存储文章内容以及所需图像。</p><p>博客中的每个链接都是一个page，比如”关于我“的页面等等，可以通过hexo new page “page 名称”来生成，生成完之后会在source中出现一个文件夹，里面有index.md的文件，编辑这个文件就是编辑该页面的内容。该page的设置在你的themes的_config.yml进行设置。</p><p>至于config文件到底怎么设置，可以去hexo上下载喜欢的主题，解压到themes当中。</p><p>接着在blog路径下的config文件中将theme一栏改为需要使用的theme文件夹名称，一般theme中的config文件都有注释，应该看看就明白了。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hellow world</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/21/hello-world/"/>
    <url>/2021/12/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
